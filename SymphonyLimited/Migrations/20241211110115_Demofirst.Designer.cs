// <auto-generated />
using System;
using Data_DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SymphonyLimited.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241211110115_Demofirst")]
    partial class Demofirst
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data_DAL.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("class_name");

                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("ClassID");

                    b.HasIndex("CourseID");

                    b.HasIndex("FacultyID");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Data_DAL.ContactUs", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Data_DAL.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_months");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Data_DAL.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<string>("AvailableCourses")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("available_courses");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("exam_date");

                    b.Property<decimal>("ExamFee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("exam_fee");

                    b.Property<int>("MaxMarks")
                        .HasColumnType("int")
                        .HasColumnName("max_marks");

                    b.HasKey("ExamID");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("Data_DAL.FAQs", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FAQID");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Data_DAL.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyID"));

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyID");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Data_DAL.LabSession", b =>
                {
                    b.Property<int>("LabSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabSessionID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<int?>("FacultyID")
                        .HasColumnType("int")
                        .HasColumnName("faculty_id");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("session_date");

                    b.Property<string>("SessionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("LabSessionID");

                    b.HasIndex("ClassID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("StudentID");

                    b.ToTable("LabSession", t =>
                        {
                            t.HasCheckConstraint("chk_SessionType", "[SessionType] IN ('DuringCourse', 'AfterCourse')");
                        });
                });

            modelBuilder.Entity("Data_DAL.Payments", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Data_DAL.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"));

                    b.Property<string>("ClassAssigned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("class_assigned");

                    b.Property<decimal>("CourseFee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("course_fee");

                    b.Property<int>("ExamID")
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    b.Property<int>("MarksObtained")
                        .HasColumnType("int")
                        .HasColumnName("marks_obtained");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_due_date");

                    b.Property<int>("StudentID")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("ResultID");

                    b.HasIndex("ExamID");

                    b.HasIndex("StudentID");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Data_DAL.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntranceExamDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("entrance_exam_date");

                    b.Property<decimal?>("EntranceExamFee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("entrance_exam_fee");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_date");

                    b.HasKey("StudentID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Data_DAL.StudentCourseRegistration", b =>
                {
                    b.Property<int>("RegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_status");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_date");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("RegistrationID");

                    b.HasIndex("ClassID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentCourseRegistration");
                });

            modelBuilder.Entity("Data_DAL.Class", b =>
                {
                    b.HasOne("Data_DAL.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_DAL.Faculty", "Faculty")
                        .WithMany("Classes")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Data_DAL.LabSession", b =>
                {
                    b.HasOne("Data_DAL.Class", "Class")
                        .WithMany("LabSessions")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_DAL.Faculty", "Faculty")
                        .WithMany("LabSessions")
                        .HasForeignKey("FacultyID");

                    b.HasOne("Data_DAL.Student", "Student")
                        .WithMany("LabSessions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Faculty");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data_DAL.Payments", b =>
                {
                    b.HasOne("Data_DAL.StudentCourseRegistration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Data_DAL.Result", b =>
                {
                    b.HasOne("Data_DAL.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_DAL.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data_DAL.StudentCourseRegistration", b =>
                {
                    b.HasOne("Data_DAL.Class", "Class")
                        .WithMany("Registrations")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data_DAL.Course", "Course")
                        .WithMany("Registrations")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data_DAL.Student", "Student")
                        .WithMany("Registrations")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data_DAL.Class", b =>
                {
                    b.Navigation("LabSessions");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Data_DAL.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Data_DAL.Exam", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Data_DAL.Faculty", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("LabSessions");
                });

            modelBuilder.Entity("Data_DAL.Student", b =>
                {
                    b.Navigation("LabSessions");

                    b.Navigation("Registrations");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
